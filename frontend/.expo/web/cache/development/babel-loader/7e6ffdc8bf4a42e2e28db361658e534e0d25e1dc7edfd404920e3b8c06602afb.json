{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var handleLogin = function handleLogin() {\n    if (!email || !password) {\n      Alert.alert('Erro', 'Preencha todos os campos');\n      return;\n    }\n    navigation.replace('Dashboard');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Login\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Email\",\n      value: email,\n      onChangeText: setEmail\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Senha\",\n      secureTextEntry: true,\n      value: password,\n      onChangeText: setPassword\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleLogin,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Entrar\"\n      })\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate('Register');\n      },\n      children: _jsx(Text, {\n        style: styles.linkText,\n        children: \"N\\xE3o tem uma conta? Cadastre-se\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    color: '#2196F3'\n  },\n  input: {\n    width: '100%',\n    padding: 15,\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 8,\n    marginBottom: 15\n  },\n  button: {\n    backgroundColor: '#2196F3',\n    padding: 15,\n    borderRadius: 8,\n    width: '100%',\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  linkText: {\n    marginTop: 15,\n    color: '#2196F3',\n    textDecorationLine: 'underline'\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","StyleSheet","Alert","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","handleLogin","alert","replace","style","styles","container","children","title","input","placeholder","value","onChangeText","secureTextEntry","button","onPress","buttonText","navigate","linkText","create","flex","justifyContent","alignItems","padding","fontSize","fontWeight","marginBottom","color","width","borderWidth","borderColor","borderRadius","backgroundColor","marginTop","textDecorationLine"],"sources":["C:/Users/User/GEVapp/frontend/app/screens/LoginScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert } from 'react-native';\r\n\r\nexport default function LoginScreen({ navigation }: any) {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleLogin = () => {\r\n    if (!email || !password) {\r\n      Alert.alert('Erro', 'Preencha todos os campos');\r\n      return;\r\n    }\r\n    // Aqui você chamaria API real de login\r\n    navigation.replace('Dashboard'); // sucesso → Dashboard\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Login</Text>\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Email\"\r\n        value={email}\r\n        onChangeText={setEmail}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Senha\"\r\n        secureTextEntry\r\n        value={password}\r\n        onChangeText={setPassword}\r\n      />\r\n\r\n      <TouchableOpacity style={styles.button} onPress={handleLogin}>\r\n        <Text style={styles.buttonText}>Entrar</Text>\r\n      </TouchableOpacity>\r\n\r\n      <TouchableOpacity onPress={() => navigation.navigate('Register')}>\r\n        <Text style={styles.linkText}>Não tem uma conta? Cadastre-se</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20 },\r\n  title: { fontSize: 32, fontWeight: 'bold', marginBottom: 20, color: '#2196F3' },\r\n  input: { width: '100%', padding: 15, borderWidth: 1, borderColor: '#ccc', borderRadius: 8, marginBottom: 15 },\r\n  button: { backgroundColor: '#2196F3', padding: 15, borderRadius: 8, width: '100%', alignItems: 'center' },\r\n  buttonText: { color: 'white', fontWeight: 'bold' },\r\n  linkText: { marginTop: 15, color: '#2196F3', textDecorationLine: 'underline' },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}