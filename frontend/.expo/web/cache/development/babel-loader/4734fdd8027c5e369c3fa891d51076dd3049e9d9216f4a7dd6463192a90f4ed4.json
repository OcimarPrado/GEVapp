{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar isLoggedIn = false;\nvar SplashScreen = function SplashScreen(_ref) {\n  var navigation = _ref.navigation;\n  var spinValue = useRef(new Animated.Value(0)).current;\n  useEffect(function () {\n    Animated.loop(Animated.timing(spinValue, {\n      toValue: 1,\n      duration: 1000,\n      useNativeDriver: true\n    })).start();\n  }, []);\n  var spin = spinValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '360deg']\n  });\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      if (isLoggedIn) {\n        navigation.replace('Dashboard');\n      } else {\n        navigation.replace('Login');\n      }\n    }, 2500);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [navigation]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"GEV\"\n    }), _jsx(Text, {\n      style: styles.subtitle,\n      children: \"Gest\\xE3o de Estoque e Vendas\"\n    }), _jsx(Text, {\n      style: styles.italic,\n      children: \"\\\"Tecnologia que Automatiza Resultados\\\"\"\n    }), _jsx(Animated.View, {\n      style: [styles.loader, {\n        transform: [{\n          rotate: spin\n        }]\n      }]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#2196F3',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 48,\n    color: 'white',\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  subtitle: {\n    fontSize: 18,\n    color: 'white',\n    marginBottom: 10\n  },\n  italic: {\n    fontSize: 14,\n    color: 'white',\n    fontStyle: 'italic',\n    textAlign: 'center',\n    marginBottom: 40\n  },\n  loader: {\n    width: 40,\n    height: 40,\n    borderWidth: 3,\n    borderColor: 'white',\n    borderTopColor: 'transparent',\n    borderRadius: 20\n  }\n});\nexport default SplashScreen;","map":{"version":3,"names":["React","useEffect","useRef","View","Text","StyleSheet","Animated","jsx","_jsx","jsxs","_jsxs","isLoggedIn","SplashScreen","_ref","navigation","spinValue","Value","current","loop","timing","toValue","duration","useNativeDriver","start","spin","interpolate","inputRange","outputRange","timer","setTimeout","replace","clearTimeout","style","styles","container","children","title","subtitle","italic","loader","transform","rotate","create","flex","backgroundColor","justifyContent","alignItems","padding","fontSize","color","fontWeight","marginBottom","fontStyle","textAlign","width","height","borderWidth","borderColor","borderTopColor","borderRadius"],"sources":["C:/Users/User/GEVapp/frontend/app/screens/SplashScreen.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { View, Text, StyleSheet, Animated } from 'react-native';\r\n\r\n// Flag para simular se o usuário está logado ou não\r\n// Quando você criar LoginScreen e RegisterScreen, pode substituir por uma checagem real\r\nconst isLoggedIn = false;\r\n\r\nconst SplashScreen = ({ navigation }: any) => {\r\n  const spinValue = useRef(new Animated.Value(0)).current;\r\n\r\n  // Animação contínua\r\n  useEffect(() => {\r\n    Animated.loop(\r\n      Animated.timing(spinValue, {\r\n        toValue: 1,\r\n        duration: 1000,\r\n        useNativeDriver: true,\r\n      })\r\n    ).start();\r\n  }, []);\r\n\r\n  // Interpolação do valor de rotação\r\n  const spin = spinValue.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: ['0deg', '360deg'],\r\n  });\r\n\r\n  // Navegação para a próxima tela após 2.5s\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      if (isLoggedIn) {\r\n        navigation.replace('Dashboard');\r\n      } else {\r\n        // Altere aqui quando criar as telas\r\n        // Por enquanto, vai para Dashboard, mas futuramente pode ir para LoginScreen\r\n        navigation.replace('Login'); // 'Login' deve existir futuramente\r\n      }\r\n    }, 2500);\r\n    return () => clearTimeout(timer);\r\n  }, [navigation]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>GEV</Text>\r\n      <Text style={styles.subtitle}>Gestão de Estoque e Vendas</Text>\r\n      <Text style={styles.italic}>\"Tecnologia que Automatiza Resultados\"</Text>\r\n      <Animated.View style={[styles.loader, { transform: [{ rotate: spin }] }]} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#2196F3',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    fontSize: 48,\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    marginBottom: 20,\r\n  },\r\n  subtitle: {\r\n    fontSize: 18,\r\n    color: 'white',\r\n    marginBottom: 10,\r\n  },\r\n  italic: {\r\n    fontSize: 14,\r\n    color: 'white',\r\n    fontStyle: 'italic',\r\n    textAlign: 'center',\r\n    marginBottom: 40,\r\n  },\r\n  loader: {\r\n    width: 40,\r\n    height: 40,\r\n    borderWidth: 3,\r\n    borderColor: 'white',\r\n    borderTopColor: 'transparent',\r\n    borderRadius: 20,\r\n  },\r\n});\r\n\r\nexport default SplashScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}