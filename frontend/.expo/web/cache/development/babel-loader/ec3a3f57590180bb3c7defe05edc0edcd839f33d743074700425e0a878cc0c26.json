{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SplashScreen from \"./app/screens/SplashScreen\";\nimport LoginScreen from \"./app/screens/LoginScreen\";\nimport DashboardScreen from \"./app/screens/DashboardScreen\";\nimport ProductsScreen from \"./app/screens/ProductsScreen\";\nimport NewProductScreen from \"./app/screens/NewProductScreen\";\nimport NewSaleScreen from \"./app/screens/NewSaleScreen\";\nimport SalesHistoryScreen from \"./app/screens/SalesHistoryScreen\";\nimport ReportsScreen from \"./app/screens/ReportsScreen\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoggedIn = _useState4[0],\n    setIsLoggedIn = _useState4[1];\n  useEffect(function () {\n    checkLoginStatus();\n  }, []);\n  var checkLoginStatus = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var userLoggedIn = yield AsyncStorage.getItem('userLoggedIn');\n        var loginTime = yield AsyncStorage.getItem('loginTime');\n        if (userLoggedIn === 'true' && loginTime) {\n          var loginDate = new Date(loginTime);\n          var now = new Date();\n          var diffHours = Math.abs(now.getTime() - loginDate.getTime()) / (1000 * 60 * 60);\n          if (diffHours < 24) {\n            setIsLoggedIn(true);\n          } else {\n            yield AsyncStorage.multiRemove(['userLoggedIn', 'userEmail', 'loginTime']);\n            setIsLoggedIn(false);\n          }\n        } else {\n          setIsLoggedIn(false);\n        }\n      } catch (error) {\n        console.error('Erro ao verificar status de login:', error);\n        setIsLoggedIn(false);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function checkLoginStatus() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  if (isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#2196F3'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#fff\"\n      })\n    });\n  }\n  return _jsxs(NavigationContainer, {\n    children: [_jsx(StatusBar, {\n      style: \"light\",\n      backgroundColor: \"#2196F3\"\n    }), _jsxs(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false,\n        animation: 'slide_from_right'\n      },\n      initialRouteName: isLoggedIn ? \"Dashboard\" : \"Login\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen,\n        options: {\n          title: 'Login'\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Splash\",\n        component: SplashScreen,\n        options: {\n          title: 'Carregando...'\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Dashboard\",\n        component: DashboardScreen,\n        options: {\n          title: 'GEV App'\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Products\",\n        component: ProductsScreen,\n        options: {\n          title: 'Produtos'\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"NewProduct\",\n        component: NewProductScreen,\n        options: {\n          title: 'Produto'\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"NewSale\",\n        component: NewSaleScreen,\n        options: {\n          title: 'Nova Venda'\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"SalesHistory\",\n        component: SalesHistoryScreen,\n        options: {\n          title: 'Histórico'\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Reports\",\n        component: ReportsScreen,\n        options: {\n          title: 'Relatórios'\n        }\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","StatusBar","NavigationContainer","createNativeStackNavigator","AsyncStorage","ActivityIndicator","View","SplashScreen","LoginScreen","DashboardScreen","ProductsScreen","NewProductScreen","NewSaleScreen","SalesHistoryScreen","ReportsScreen","jsx","_jsx","jsxs","_jsxs","Stack","App","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","isLoggedIn","setIsLoggedIn","checkLoginStatus","_ref","_asyncToGenerator","userLoggedIn","getItem","loginTime","loginDate","Date","now","diffHours","Math","abs","getTime","multiRemove","error","console","apply","arguments","style","flex","justifyContent","alignItems","backgroundColor","children","size","color","Navigator","screenOptions","headerShown","animation","initialRouteName","Screen","name","component","options","title"],"sources":["C:/Users/User/GEVapp/frontend/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { ActivityIndicator, View } from 'react-native';\r\n\r\n// Importar todas as telas\r\nimport SplashScreen from './app/screens/SplashScreen';\r\nimport LoginScreen from './app/screens/LoginScreen';\r\nimport DashboardScreen from './app/screens/DashboardScreen';\r\nimport ProductsScreen from './app/screens/ProductsScreen';\r\nimport NewProductScreen from './app/screens/NewProductScreen';\r\nimport NewSaleScreen from './app/screens/NewSaleScreen';\r\nimport SalesHistoryScreen from './app/screens/SalesHistoryScreen';\r\nimport ReportsScreen from './app/screens/ReportsScreen';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  // Verificar se o usuário está logado\r\n  useEffect(() => {\r\n    checkLoginStatus();\r\n  }, []);\r\n\r\n  const checkLoginStatus = async () => {\r\n    try {\r\n      const userLoggedIn = await AsyncStorage.getItem('userLoggedIn');\r\n      const loginTime = await AsyncStorage.getItem('loginTime');\r\n      \r\n      if (userLoggedIn === 'true' && loginTime) {\r\n        // Verificar se o login não expirou (24 horas)\r\n        const loginDate = new Date(loginTime);\r\n        const now = new Date();\r\n        const diffHours = Math.abs(now.getTime() - loginDate.getTime()) / (1000 * 60 * 60);\r\n        \r\n        if (diffHours < 24) {\r\n          setIsLoggedIn(true);\r\n        } else {\r\n          // Login expirado, limpar dados\r\n          await AsyncStorage.multiRemove(['userLoggedIn', 'userEmail', 'loginTime']);\r\n          setIsLoggedIn(false);\r\n        }\r\n      } else {\r\n        setIsLoggedIn(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao verificar status de login:', error);\r\n      setIsLoggedIn(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#2196F3' }}>\r\n        <ActivityIndicator size=\"large\" color=\"#fff\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <StatusBar style=\"light\" backgroundColor=\"#2196F3\" />\r\n      \r\n      <Stack.Navigator \r\n        screenOptions={{ \r\n          headerShown: false,\r\n          animation: 'slide_from_right'\r\n        }}\r\n        initialRouteName={isLoggedIn ? \"Dashboard\" : \"Login\"}\r\n      >\r\n        {/* Telas de Autenticação */}\r\n        <Stack.Screen \r\n          name=\"Login\" \r\n          component={LoginScreen}\r\n          options={{ title: 'Login' }}\r\n        />\r\n        \r\n        {/* Tela principal - Dashboard */}\r\n        <Stack.Screen\r\n          name=\"Splash\"\r\n          component={SplashScreen}\r\n          options={{ title: 'Carregando...' }}\r\n        />  \r\n        \r\n        <Stack.Screen \r\n          name=\"Dashboard\" \r\n          component={DashboardScreen}\r\n          options={{ title: 'GEV App' }}\r\n        />\r\n        \r\n        {/* Gestão de Produtos */}\r\n        <Stack.Screen \r\n          name=\"Products\" \r\n          component={ProductsScreen}\r\n          options={{ title: 'Produtos' }}\r\n        />\r\n        \r\n        <Stack.Screen \r\n          name=\"NewProduct\" \r\n          component={NewProductScreen}\r\n          options={{ title: 'Produto' }}\r\n        />\r\n        \r\n        {/* Vendas */}\r\n        <Stack.Screen \r\n          name=\"NewSale\" \r\n          component={NewSaleScreen}\r\n          options={{ title: 'Nova Venda' }}\r\n        />\r\n        \r\n        <Stack.Screen \r\n          name=\"SalesHistory\" \r\n          component={SalesHistoryScreen}\r\n          options={{ title: 'Histórico' }}\r\n        />\r\n\r\n        {/* Relatórios */}\r\n        <Stack.Screen \r\n          name=\"Reports\" \r\n          component={ReportsScreen}\r\n          options={{ title: 'Relatórios' }}\r\n        />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}