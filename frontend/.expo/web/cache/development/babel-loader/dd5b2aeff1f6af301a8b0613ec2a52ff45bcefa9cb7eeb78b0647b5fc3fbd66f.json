{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { testConnection } from \"../api\";\nexport var DEBUG_MODE = __DEV__;\nexport var debugLog = function debugLog(title, data) {\n  if (DEBUG_MODE) {\n    console.log(\"\\uD83D\\uDD27 [DEBUG] \" + title, data || '');\n  }\n};\nexport var errorLog = function errorLog(title, error) {\n  console.error(\"\\u274C [ERROR] \" + title, error);\n  if (DEBUG_MODE) {\n    console.error('Stack trace:', error.stack);\n    console.error('Full error object:', JSON.stringify(error, null, 2));\n  }\n};\nexport var runDiagnostics = function () {\n  var _ref = _asyncToGenerator(function* () {\n    debugLog('Iniciando diagnósticos do app...');\n    var results = {\n      backend_connection: false,\n      permissions: {\n        camera: false,\n        media_library: false\n      },\n      network: false\n    };\n    try {\n      debugLog('Testando conexão com backend...');\n      results.backend_connection = yield testConnection();\n      debugLog('Verificando permissões...');\n      debugLog('Testando conectividade de rede...');\n      try {\n        var response = yield fetch('https://www.google.com', {\n          method: 'HEAD',\n          mode: 'no-cors'\n        });\n        results.network = true;\n      } catch (error) {\n        results.network = false;\n      }\n      debugLog('Resultados dos diagnósticos:', results);\n      return results;\n    } catch (error) {\n      errorLog('Erro durante diagnósticos', error);\n      return results;\n    }\n  });\n  return function runDiagnostics() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var showDebugInfo = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    if (!DEBUG_MODE) return;\n    var diagnostics = yield runDiagnostics();\n    var message = \"\\n\\uD83D\\uDD27 Informa\\xE7\\xF5es de Debug:\\n\\n\\uD83D\\uDCE1 Backend: \" + (diagnostics.backend_connection ? '✅ Conectado' : '❌ Desconectado') + \"\\n\\uD83C\\uDF10 Internet: \" + (diagnostics.network ? '✅ Conectado' : '❌ Desconectado') + \"\\n\\n\\uD83D\\uDD17 URL Backend: http://localhost:3000/api\\n\\n\\uD83D\\uDCA1 Dicas:\\n- Certifique-se que o backend Node.js est\\xE1 rodando\\n- Verifique se a URL do backend est\\xE1 correta\\n- Em dispositivo f\\xEDsico, use o IP da sua m\\xE1quina\\n  \";\n    Alert.alert('Debug Info', message);\n  });\n  return function showDebugInfo() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var AppConfig = {\n  BACKEND_URL: __DEV__ ? 'http://localhost:3000/api' : 'https://seu-backend-producao.com/api',\n  BACKEND_URL_DEVICE: 'http://192.168.1.100:3000/api',\n  API_TIMEOUT: 10000,\n  UPLOAD_TIMEOUT: 30000,\n  IMAGE_QUALITY: 0.8,\n  MAX_IMAGE_SIZE: 5 * 1024 * 1024,\n  ENABLE_API_LOGS: __DEV__,\n  ENABLE_DEBUG_PANEL: __DEV__\n};\nexport var getBackendUrl = function getBackendUrl() {\n  if (__DEV__) {\n    return AppConfig.BACKEND_URL;\n  }\n  return AppConfig.BACKEND_URL;\n};\nexport var validateFormData = function validateFormData(formData) {\n  debugLog('Validando FormData...');\n  try {\n    var nome = formData.get('nome');\n    var preco_custo = formData.get('preco_custo');\n    var preco_venda = formData.get('preco_venda');\n    if (!nome || !preco_custo || !preco_venda) {\n      errorLog('FormData inválido: campos obrigatórios ausentes', {\n        nome: !!nome,\n        preco_custo: !!preco_custo,\n        preco_venda: !!preco_venda\n      });\n      return false;\n    }\n    debugLog('FormData válido', {\n      nome: nome,\n      preco_custo: preco_custo,\n      preco_venda: preco_venda,\n      has_image: !!formData.get('imagem')\n    });\n    return true;\n  } catch (error) {\n    errorLog('Erro ao validar FormData', error);\n    return false;\n  }\n};\nexport var formatCurrency = function formatCurrency(value) {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n};\nexport var validateNumericInput = function validateNumericInput(value) {\n  var allowNegative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!value || value.trim() === '') return false;\n  var numericValue = parseFloat(value);\n  if (isNaN(numericValue)) return false;\n  if (!allowNegative && numericValue < 0) return false;\n  return true;\n};\nexport var cleanNumericInput = function cleanNumericInput(value) {\n  return value.replace(/[^0-9.,]/g, '').replace(',', '.');\n};\nexport var showError = function showError(title, message, error) {\n  errorLog(title + \": \" + message, error);\n  Alert.alert(title, DEBUG_MODE && error ? message + \"\\n\\nDebug: \" + error.message : message, [{\n    text: 'OK'\n  }]);\n};\nexport var showSuccess = function showSuccess(title, message, onPress) {\n  debugLog(title + \": \" + message);\n  Alert.alert(title, message, [{\n    text: 'OK',\n    onPress: onPress\n  }]);\n};","map":{"version":3,"names":["testConnection","DEBUG_MODE","__DEV__","debugLog","title","data","console","log","errorLog","error","stack","JSON","stringify","runDiagnostics","_ref","_asyncToGenerator","results","backend_connection","permissions","camera","media_library","network","response","fetch","method","mode","apply","arguments","showDebugInfo","_ref2","diagnostics","message","Alert","alert","AppConfig","BACKEND_URL","BACKEND_URL_DEVICE","API_TIMEOUT","UPLOAD_TIMEOUT","IMAGE_QUALITY","MAX_IMAGE_SIZE","ENABLE_API_LOGS","ENABLE_DEBUG_PANEL","getBackendUrl","validateFormData","formData","nome","get","preco_custo","preco_venda","has_image","formatCurrency","value","Intl","NumberFormat","style","currency","format","validateNumericInput","allowNegative","length","undefined","trim","numericValue","parseFloat","isNaN","cleanNumericInput","replace","showError","text","showSuccess","onPress"],"sources":["C:/Users/User/GEVapp/frontend/app/utils/debug.ts"],"sourcesContent":["// utils/debug.ts\r\nimport { Alert } from 'react-native';\r\nimport { testConnection } from '../api';\r\n\r\nexport const DEBUG_MODE = __DEV__; // Ativa apenas em desenvolvimento\r\n\r\n// Função para logs detalhados\r\nexport const debugLog = (title: string, data?: any) => {\r\n  if (DEBUG_MODE) {\r\n    console.log(`🔧 [DEBUG] ${title}`, data || '');\r\n  }\r\n};\r\n\r\n// Função para logs de erro\r\nexport const errorLog = (title: string, error: any) => {\r\n  console.error(`❌ [ERROR] ${title}`, error);\r\n  \r\n  if (DEBUG_MODE) {\r\n    // Em desenvolvimento, mostra mais detalhes\r\n    console.error('Stack trace:', error.stack);\r\n    console.error('Full error object:', JSON.stringify(error, null, 2));\r\n  }\r\n};\r\n\r\n// Função para testar todas as conexões do app\r\nexport const runDiagnostics = async () => {\r\n  debugLog('Iniciando diagnósticos do app...');\r\n  \r\n  const results = {\r\n    backend_connection: false,\r\n    permissions: {\r\n      camera: false,\r\n      media_library: false,\r\n    },\r\n    network: false,\r\n  };\r\n\r\n  try {\r\n    // Teste 1: Conexão com backend\r\n    debugLog('Testando conexão com backend...');\r\n    results.backend_connection = await testConnection();\r\n    \r\n    // Teste 2: Permissões (se necessário)\r\n    debugLog('Verificando permissões...');\r\n    // Aqui você pode adicionar verificações de permissões se necessário\r\n    \r\n    // Teste 3: Conectividade de rede\r\n    debugLog('Testando conectividade de rede...');\r\n    try {\r\n      const response = await fetch('https://www.google.com', { \r\n        method: 'HEAD',\r\n        mode: 'no-cors' \r\n      });\r\n      results.network = true;\r\n    } catch (error) {\r\n      results.network = false;\r\n    }\r\n\r\n    debugLog('Resultados dos diagnósticos:', results);\r\n    \r\n    return results;\r\n  } catch (error) {\r\n    errorLog('Erro durante diagnósticos', error);\r\n    return results;\r\n  }\r\n};\r\n\r\n// Função para mostrar informações de debug ao usuário\r\nexport const showDebugInfo = async () => {\r\n  if (!DEBUG_MODE) return;\r\n\r\n  const diagnostics = await runDiagnostics();\r\n  \r\n  const message = `\r\n🔧 Informações de Debug:\r\n\r\n📡 Backend: ${diagnostics.backend_connection ? '✅ Conectado' : '❌ Desconectado'}\r\n🌐 Internet: ${diagnostics.network ? '✅ Conectado' : '❌ Desconectado'}\r\n\r\n🔗 URL Backend: http://localhost:3000/api\r\n\r\n💡 Dicas:\r\n- Certifique-se que o backend Node.js está rodando\r\n- Verifique se a URL do backend está correta\r\n- Em dispositivo físico, use o IP da sua máquina\r\n  `;\r\n\r\n  Alert.alert('Debug Info', message);\r\n};\r\n\r\n// Configurações do app\r\nexport const AppConfig = {\r\n  // URLs do backend\r\n  BACKEND_URL: __DEV__ \r\n    ? 'http://localhost:3000/api' // Desenvolvimento\r\n    : 'https://seu-backend-producao.com/api', // Produção\r\n    \r\n  // URLs para dispositivos físicos (ajuste o IP conforme necessário)\r\n  BACKEND_URL_DEVICE: 'http://192.168.1.100:3000/api',\r\n  \r\n  // Timeouts\r\n  API_TIMEOUT: 10000, // 10 segundos\r\n  UPLOAD_TIMEOUT: 30000, // 30 segundos para uploads\r\n  \r\n  // Configurações de imagem\r\n  IMAGE_QUALITY: 0.8,\r\n  MAX_IMAGE_SIZE: 5 * 1024 * 1024, // 5MB\r\n  \r\n  // Debug\r\n  ENABLE_API_LOGS: __DEV__,\r\n  ENABLE_DEBUG_PANEL: __DEV__,\r\n};\r\n\r\n// Função para obter a URL correta do backend\r\nexport const getBackendUrl = () => {\r\n  // Em desenvolvimento, você pode alternar entre localhost e IP da máquina\r\n  if (__DEV__) {\r\n    // Para emulador, use localhost\r\n    // Para dispositivo físico, descomente a linha abaixo e ajuste o IP\r\n    // return AppConfig.BACKEND_URL_DEVICE;\r\n    return AppConfig.BACKEND_URL;\r\n  }\r\n  \r\n  return AppConfig.BACKEND_URL;\r\n};\r\n\r\n// Função para validar FormData antes de enviar\r\nexport const validateFormData = (formData: FormData): boolean => {\r\n  debugLog('Validando FormData...');\r\n  \r\n  try {\r\n    // Verificar se FormData tem os campos obrigatórios\r\n    const nome = formData.get('nome');\r\n    const preco_custo = formData.get('preco_custo');\r\n    const preco_venda = formData.get('preco_venda');\r\n    \r\n    if (!nome || !preco_custo || !preco_venda) {\r\n      errorLog('FormData inválido: campos obrigatórios ausentes', {\r\n        nome: !!nome,\r\n        preco_custo: !!preco_custo,\r\n        preco_venda: !!preco_venda,\r\n      });\r\n      return false;\r\n    }\r\n    \r\n    debugLog('FormData válido', {\r\n      nome,\r\n      preco_custo,\r\n      preco_venda,\r\n      has_image: !!formData.get('imagem'),\r\n    });\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    errorLog('Erro ao validar FormData', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Função para formatar valores monetários\r\nexport const formatCurrency = (value: number): string => {\r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL',\r\n  }).format(value);\r\n};\r\n\r\n// Função para validar entrada numérica\r\nexport const validateNumericInput = (value: string, allowNegative = false): boolean => {\r\n  if (!value || value.trim() === '') return false;\r\n  \r\n  const numericValue = parseFloat(value);\r\n  \r\n  if (isNaN(numericValue)) return false;\r\n  if (!allowNegative && numericValue < 0) return false;\r\n  \r\n  return true;\r\n};\r\n\r\n// Função para limpar entrada numérica\r\nexport const cleanNumericInput = (value: string): string => {\r\n  // Remove caracteres não numéricos, exceto ponto e vírgula\r\n  return value.replace(/[^0-9.,]/g, '').replace(',', '.');\r\n};\r\n\r\n// Função para mostrar alertas de erro padronizados\r\nexport const showError = (title: string, message: string, error?: any) => {\r\n  errorLog(`${title}: ${message}`, error);\r\n  \r\n  Alert.alert(\r\n    title,\r\n    DEBUG_MODE && error ? `${message}\\n\\nDebug: ${error.message}` : message,\r\n    [{ text: 'OK' }]\r\n  );\r\n};\r\n\r\n// Função para mostrar alertas de sucesso padronizados\r\nexport const showSuccess = (title: string, message: string, onPress?: () => void) => {\r\n  debugLog(`${title}: ${message}`);\r\n  \r\n  Alert.alert(\r\n    title,\r\n    message,\r\n    [{ text: 'OK', onPress }]\r\n  );\r\n};"],"mappings":";;AAEA,SAASA,cAAc;AAEvB,OAAO,IAAMC,UAAU,GAAGC,OAAO;AAGjC,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,KAAa,EAAEC,IAAU,EAAK;EACrD,IAAIJ,UAAU,EAAE;IACdK,OAAO,CAACC,GAAG,2BAAeH,KAAK,EAAIC,IAAI,IAAI,EAAE,CAAC;EAChD;AACF,CAAC;AAGD,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAQA,CAAIJ,KAAa,EAAEK,KAAU,EAAK;EACrDH,OAAO,CAACG,KAAK,qBAAcL,KAAK,EAAIK,KAAK,CAAC;EAE1C,IAAIR,UAAU,EAAE;IAEdK,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACC,KAAK,CAAC;IAC1CJ,OAAO,CAACG,KAAK,CAAC,oBAAoB,EAAEE,IAAI,CAACC,SAAS,CAACH,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EACrE;AACF,CAAC;AAGD,OAAO,IAAMI,cAAc;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IACxCZ,QAAQ,CAAC,kCAAkC,CAAC;IAE5C,IAAMa,OAAO,GAAG;MACdC,kBAAkB,EAAE,KAAK;MACzBC,WAAW,EAAE;QACXC,MAAM,EAAE,KAAK;QACbC,aAAa,EAAE;MACjB,CAAC;MACDC,OAAO,EAAE;IACX,CAAC;IAED,IAAI;MAEFlB,QAAQ,CAAC,iCAAiC,CAAC;MAC3Ca,OAAO,CAACC,kBAAkB,SAASjB,cAAc,CAAC,CAAC;MAGnDG,QAAQ,CAAC,2BAA2B,CAAC;MAIrCA,QAAQ,CAAC,mCAAmC,CAAC;MAC7C,IAAI;QACF,IAAMmB,QAAQ,SAASC,KAAK,CAAC,wBAAwB,EAAE;UACrDC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAE;QACR,CAAC,CAAC;QACFT,OAAO,CAACK,OAAO,GAAG,IAAI;MACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACdO,OAAO,CAACK,OAAO,GAAG,KAAK;MACzB;MAEAlB,QAAQ,CAAC,8BAA8B,EAAEa,OAAO,CAAC;MAEjD,OAAOA,OAAO;IAChB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdD,QAAQ,CAAC,2BAA2B,EAAEC,KAAK,CAAC;MAC5C,OAAOO,OAAO;IAChB;EACF,CAAC;EAAA,gBAxCYH,cAAcA,CAAA;IAAA,OAAAC,IAAA,CAAAY,KAAA,OAAAC,SAAA;EAAA;AAAA,GAwC1B;AAGD,OAAO,IAAMC,aAAa;EAAA,IAAAC,KAAA,GAAAd,iBAAA,CAAG,aAAY;IACvC,IAAI,CAACd,UAAU,EAAE;IAEjB,IAAM6B,WAAW,SAASjB,cAAc,CAAC,CAAC;IAE1C,IAAMkB,OAAO,6EAGDD,WAAW,CAACb,kBAAkB,GAAG,aAAa,GAAG,gBAAgB,mCAChEa,WAAW,CAACT,OAAO,GAAG,aAAa,GAAG,gBAAgB,wPAQlE;IAEDW,KAAK,CAACC,KAAK,CAAC,YAAY,EAAEF,OAAO,CAAC;EACpC,CAAC;EAAA,gBApBYH,aAAaA,CAAA;IAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAoBzB;AAGD,OAAO,IAAMO,SAAS,GAAG;EAEvBC,WAAW,EAAEjC,OAAO,GAChB,2BAA2B,GAC3B,sCAAsC;EAG1CkC,kBAAkB,EAAE,+BAA+B;EAGnDC,WAAW,EAAE,KAAK;EAClBC,cAAc,EAAE,KAAK;EAGrBC,aAAa,EAAE,GAAG;EAClBC,cAAc,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;EAG/BC,eAAe,EAAEvC,OAAO;EACxBwC,kBAAkB,EAAExC;AACtB,CAAC;AAGD,OAAO,IAAMyC,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EAEjC,IAAIzC,OAAO,EAAE;IAIX,OAAOgC,SAAS,CAACC,WAAW;EAC9B;EAEA,OAAOD,SAAS,CAACC,WAAW;AAC9B,CAAC;AAGD,OAAO,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,QAAkB,EAAc;EAC/D1C,QAAQ,CAAC,uBAAuB,CAAC;EAEjC,IAAI;IAEF,IAAM2C,IAAI,GAAGD,QAAQ,CAACE,GAAG,CAAC,MAAM,CAAC;IACjC,IAAMC,WAAW,GAAGH,QAAQ,CAACE,GAAG,CAAC,aAAa,CAAC;IAC/C,IAAME,WAAW,GAAGJ,QAAQ,CAACE,GAAG,CAAC,aAAa,CAAC;IAE/C,IAAI,CAACD,IAAI,IAAI,CAACE,WAAW,IAAI,CAACC,WAAW,EAAE;MACzCzC,QAAQ,CAAC,iDAAiD,EAAE;QAC1DsC,IAAI,EAAE,CAAC,CAACA,IAAI;QACZE,WAAW,EAAE,CAAC,CAACA,WAAW;QAC1BC,WAAW,EAAE,CAAC,CAACA;MACjB,CAAC,CAAC;MACF,OAAO,KAAK;IACd;IAEA9C,QAAQ,CAAC,iBAAiB,EAAE;MAC1B2C,IAAI,EAAJA,IAAI;MACJE,WAAW,EAAXA,WAAW;MACXC,WAAW,EAAXA,WAAW;MACXC,SAAS,EAAE,CAAC,CAACL,QAAQ,CAACE,GAAG,CAAC,QAAQ;IACpC,CAAC,CAAC;IAEF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOtC,KAAK,EAAE;IACdD,QAAQ,CAAC,0BAA0B,EAAEC,KAAK,CAAC;IAC3C,OAAO,KAAK;EACd;AACF,CAAC;AAGD,OAAO,IAAM0C,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAa,EAAa;EACvD,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE;EACZ,CAAC,CAAC,CAACC,MAAM,CAACL,KAAK,CAAC;AAClB,CAAC;AAGD,OAAO,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIN,KAAa,EAAqC;EAAA,IAAnCO,aAAa,GAAAhC,SAAA,CAAAiC,MAAA,QAAAjC,SAAA,QAAAkC,SAAA,GAAAlC,SAAA,MAAG,KAAK;EACvE,IAAI,CAACyB,KAAK,IAAIA,KAAK,CAACU,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,KAAK;EAE/C,IAAMC,YAAY,GAAGC,UAAU,CAACZ,KAAK,CAAC;EAEtC,IAAIa,KAAK,CAACF,YAAY,CAAC,EAAE,OAAO,KAAK;EACrC,IAAI,CAACJ,aAAa,IAAII,YAAY,GAAG,CAAC,EAAE,OAAO,KAAK;EAEpD,OAAO,IAAI;AACb,CAAC;AAGD,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAId,KAAa,EAAa;EAE1D,OAAOA,KAAK,CAACe,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;AACzD,CAAC;AAGD,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIhE,KAAa,EAAE2B,OAAe,EAAEtB,KAAW,EAAK;EACxED,QAAQ,CAAIJ,KAAK,UAAK2B,OAAO,EAAItB,KAAK,CAAC;EAEvCuB,KAAK,CAACC,KAAK,CACT7B,KAAK,EACLH,UAAU,IAAIQ,KAAK,GAAMsB,OAAO,mBAActB,KAAK,CAACsB,OAAO,GAAKA,OAAO,EACvE,CAAC;IAAEsC,IAAI,EAAE;EAAK,CAAC,CACjB,CAAC;AACH,CAAC;AAGD,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIlE,KAAa,EAAE2B,OAAe,EAAEwC,OAAoB,EAAK;EACnFpE,QAAQ,CAAIC,KAAK,UAAK2B,OAAS,CAAC;EAEhCC,KAAK,CAACC,KAAK,CACT7B,KAAK,EACL2B,OAAO,EACP,CAAC;IAAEsC,IAAI,EAAE,IAAI;IAAEE,OAAO,EAAPA;EAAQ,CAAC,CAC1B,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}